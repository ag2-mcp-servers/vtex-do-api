# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:06:49+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query

from models import AddCommentRequest, EditTaskRequest, NewTaskRequest, NotesPostRequest

app = MCPProxy(
    contact={},
    description='VTEX DO is a task management system for authorized users to process orders. It is possible to control notes, and create, update, list, and retrieve tasks.',
    title='VTEX Do API',
    version='1.0',
    servers=[
        {'url': 'https://vtex.local'},
        {
            'description': 'VTEX server url',
            'url': 'https://{accountName}.{environment}.com.br/api/do',
            'variables': {
                'accountName': {
                    'default': '{accountName}',
                    'description': 'Name of the VTEX account. Used as part of the URL.',
                },
                'environment': {
                    'default': '{environment}',
                    'description': 'Environment to use. Used as part of the URL.',
                },
            },
        },
    ],
)


@app.get(
    '/notes',
    description=""" Retrieves notes related to a specific `orderId`. """,
    tags=['note_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_notesbyorder_id(
    target_id: str = Query(..., alias='target.id'),
    per_page: Optional[int] = Query(None, alias='perPage'),
    page: Optional[int] = None,
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    reason: Optional[str] = None,
):
    """
    Get Notes by orderId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/notes',
    description=""" This endpoint creates a new note in VTEX DO. Be aware of the following limitations:


- The maximum number of notes for an order is 30.


- The maximum number of characters in a note's description is 2000. """,
    tags=['note_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def new_note(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    body: NotesPostRequest = None,
):
    """
    Create Note
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/notes/{noteId}',
    description=""" Retrieves a given note in VTEX DO, filtering by `noteId`. """,
    tags=['note_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_note(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    note_id: str = Path(..., alias='noteId'),
    reason: Optional[str] = None,
):
    """
    Retrieve Note
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tasks',
    description=""" This endpoint allows you to filter tasks. You can choose between the following filtering options: 

- **Assignees:** using `assignee.email` and `status`. Example: `https://{{accountName}}.{{environment}}.com.br/api/do/tasks?assignee.email={{person@email.com}}&status={{open}}`. 

- **Targets:** using `targetId` and `status`. Example: `https://{{accountName}}.{{environment}}.com.br/api/do/tasks?target.id={{name}}&status={{open}}`. 

- **Paged tasks:** using `page`, `perPage` and `status`. Example: `https://{{accountName}}.{{environment}}.com.br/api/do/tasks?page={{1}}&perPage={{10}}&status=;{{-Closed}}`. 

- **Context:** using `context`, `page`, `perPage` and `status`. Example: `https://{{accountName}}.{{environment}}.com.br/api/do/tasks?context={{context}}&page={{1}}&perPage={{10}}&status={{-Closed}}`. """,
    tags=['task_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def listtasksbyassignee(
    assignee_email: Optional[str] = Query(None, alias='assignee.email'),
    target_id: Optional[str] = Query(None, alias='target.id'),
    context: Optional[str] = None,
    page: Optional[str] = None,
    per_page: Optional[str] = Query(None, alias='perPage'),
    status: Optional[str] = None,
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    List tasks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tasks',
    description=""" Creates a new task in VTEX DO. """,
    tags=['task_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def new_task(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: NewTaskRequest = ...,
):
    """
    Create Task
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tasks/{taskId}',
    description=""" Retrieves a given task, filtering by `taskId`. """,
    tags=['task_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_task(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    task_id: str = Path(..., alias='taskId'),
):
    """
    Retrieve Task
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/tasks/{taskId}',
    description=""" Updates a given task's status, for example, filtering by `taskId`. """,
    tags=['task_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def edit_task(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    task_id: str = Path(..., alias='taskId'),
    body: EditTaskRequest = ...,
):
    """
    Update Task
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tasks/{taskId}/comments',
    description=""" Adds a comment to a given task, filtering by `taskId`. """,
    tags=['task_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def add_comment(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    task_id: str = Path(..., alias='taskId'),
    body: AddCommentRequest = ...,
):
    """
    Add Comment on a Task
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
